//Bruteforce Approach

//Iterative version

class Solution {
    public boolean isPowerOfFour(int num) {
        if (num <= 0) {
            return false;
        }

        while (true) {
            if (num == 1) {
                break;
            }

            if ((num % 4) != 0) {
                return false;
            }

            num = num / 4;// num=num>>2
        }

        return true;
    }
}

// Recurssive version

class Solution {
    public boolean isPowerOfFour(int num) {
        if (num == 1) {
            return true;
        }

        if ((num % 4) != 0 || num <= 0) {
            return false;
        }

        return isPowerOfFour(num / 4); // return isPowerOf4(num>>2);
    }
}

// Optimal Approach

/*
 * All power of 4 numbers are power of 2 as well because 4 is a power of 2 and
 * all power of two numbers has only one set bit,hence every power of 4 number
 * should have only 1 set bit.
 * For power of 4, the additional restriction is that in binary form, the only
 * "1" should always located at the odd position.
 * 
 * 4 = (00000100) => 1 is at odd position 3 (right to left)
 * 16 = (00010000) => 1 is at odd position 5 (right to left)
 * 64 = (01000000) => 1 is at odd position 7 (right to left)
 * 
 */

// Naive Implementation

class Solution {
    public boolean isPowerOfFour(int num) {
        if (isPowerOf2(num) && isSetBitAtOddPosition(num)) {
            return true;
        }

        return false;
    }

    private boolean isPowerOf2(int num) {
        if (num <= 0) {
            return false;
        }

        return (num & (num - 1)) == 0;
    }

    private boolean isSetBitAtOddPosition(int num) {
        int mask;
        // Check if any even-position bit is the only set bit; if so, return false; otherwise, return true.
        for (int i = 2; i <= 32; i += 2) {
            mask = 1 << (i - 1);
            if ((num & mask) != 0) {
                return false;
            }
        }
        return true;
    }
}

// Optimal Implementation 
// we can use "num & 0x55555555==num" to check if only  "1" is located at the odd position.

class Solution {
    public boolean isPowerOfFour(int num) {
        if (isPowerOf2(num) && isSetBitAtOddPosition(num)) {
            return true;
        }

        return false;
    }

    private boolean isPowerOf2(int num) {
        if (num <= 0) {
            return false;
        }

        return (num & (num - 1)) == 0;
    }

    private boolean isSetBitAtOddPosition(int num) {
        int oddMask = 0x55555555;
        return (num & oddMask) == num;
    }
}
