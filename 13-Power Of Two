//Bruteforce Approach

//Iterative version
class Solution {
    public boolean isPowerOfTwo(int num) {
        if (num <= 0) {
            return false;
        }

        while (true) {
            if (num == 1) {
                break;
            }

            if ((num % 2) != 0) {
                return false;
            }

            num = num / 2;// num=num>>1
        }

        return true;
    }
}

// Recurssive version

class Solution {
    public boolean isPowerOfTwo(int num) {
        if (num == 1) {// 2^0=1
            return true;
        }

        if (num <= 0 || (num % 2) != 0) {
            return false;
        }

        return isPowerOfTwo(num / 2); // return isPowerOfTwo_Recursive(num>>1);
    }
}

// Better Approach
/*
 * All power of two numbers has only a one-bit set. So count
 * the no. of set bits and if you get 1 then the number is a power of 2 otherwise not
 */

class Solution {
    public boolean isPowerOfTwo(int num) {
        if (num <= 0) {
            return false;
        }

        return Integer.bitCount(num) == 1;
    }
}

// Optimal Approach
/*
 * if a number n is a power of 2 then bitwise & of n and n-1 will be zero.
 * We can say n is a power of 2 or not based on the value of n & (n-1).
 */

class Solution {
    public boolean isPowerOfTwo(int num) {
        if (num <= 0) {
            return false;
        }

        return (num & (num - 1)) == 0;
    }
}
