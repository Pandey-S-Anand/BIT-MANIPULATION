//Bruteforce Approach

class Solution {
    public int findSingleNumber(int[] arr) {
        int singleNumber = -1;

        for (int i = 0; i < arr.length; i++) {
            int count = 0;
            for (int j = 0; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    count++;
                }
            }

            if ((count % 2) != 0) {
                singleNumber = arr[i];
                break;
            }
        }

        return singleNumber;
    }
}


//Better Approach

class Solution {
    public int findSingleNumber(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>(arr.length);
        int singleNumber = -1;

        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        for (int key : frequencyMap.keySet()) {
            if ((frequencyMap.get(key) % 2) == 1) {
                singleNumber = key;
                break;
            }
        }

        return singleNumber;
    }
}


//Good Approach

class Solution {
    public int findSingleNumber(int[] arr) {
        int totalSum = 0, uniqueSum = 0;
        Set<Integer> uniqueElements = new HashSet<>(arr.length);

        for (int num : arr) {
            uniqueElements.add(num);
            totalSum += num;
        }

        for (int num : uniqueElements) {
            uniqueSum += num;
        }

        return (2 * uniqueSum) - totalSum;
    }
}


//Optimal Approach

class Solution {
    public int findSingleNumber(int[] arr) {
        int singleNumber = arr[0];

        for (int i = 1; i < arr.length; i++) {
            singleNumber ^= arr[i];
        }

        return singleNumber;
    }
}

