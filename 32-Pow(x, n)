// Brute Force Approach

class Solution {
    public double myPow(double base, int exponent) {
        long power = exponent; // Use long to handle edge case for Integer.MIN_VALUE

        // Handle base cases where power is 0, base is 1, or base is 0
        if (power == 0 || base == 1.0) {
            return 1.0; // x^0 == 1 and 1^n == 1 for all n
        }

        if (power == 1) {
            return base; // x^1 == x
        }

        if (base == 0.0) {
            return 0.0; // 0 raised to any positive power is 0
        }

        // If the power is positive, calculate power using brute force
        if (power > 0) {
            return calculatePower(base, power);
        }

        // If the power is negative, calculate 1 / (base^abs(power))
        return 1 / calculatePower(base, Math.abs(power));
    }

    private double calculatePower(double base, long power) {
        double result = 1.0;

        for (long i = 1; i <= power; i++) {
            result *= base;
        }

        return result; 
    }
}



// Optimal Approach:

/*
To improve efficiency, we will use Binary Exponentiation, which calculates base^power in O(log2(power)) time by reducing the number of multiplications.

The key idea is to use the binary representation of the exponent to divide the computation:
- Multiply the result (`res`) by the base if the corresponding bit in the exponent is 1.
- Square the base at each step, moving to the next higher bit, until the exponent becomes 0.

Example:
Let base = 7, power = 11, and res = 1. We need to calculate 7^11.

The binary representation of 11 is (1011):
    1    0    1    1
   2^3  2^2  2^1  2^0    <-- Place values of each bit

Alternatively, we can write this as:
    1    0    1    1
    8    4    2    1    <-- Corresponding powers of 2

Thus, we calculate:
    7^8 × 7^2 × 7^1 = 5764801 × 49 × 7 = 1977326743, which is the desired result.

Note: We omit 7^4 in this case because the third bit (representing 2^2) is OFF in the binary representation of 11.

Now, let's implement this approach based on the logic above.
*/


class Solution {
    public double myPow(double base, int exponent) {
        long power = exponent;

        if (power == 0 || base == 1.0) {
            return 1.0;
        }

        if (power == 1) {
            return base;
        }

        if (base == 0.0) {
            return 0.0;
        }

        if (power > 0) {
            return calculatePower(base, power);
        }

        return 1 / calculatePower(base, Math.abs(power));
    }

    private double calculatePower(double base, long power) {
        double result = 1.0;

        while (power != 0) {
            if ((power & 1) != 0) { // If Bit is ON
                result *= base;
            }

            base = base * base;
            power = power >> 1;
        }

        return result;
    }
}
