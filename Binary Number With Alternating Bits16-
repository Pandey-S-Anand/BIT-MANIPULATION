class Solution {
    public boolean hasAlternatingBits(int n) {
        int allOnes = (n ^ (n >> 1));
        return isPowerOf2(all_Ones + 1);
    }

    private boolean isPowerOf2(int num) {
        return (num & (num - 1)) == 0;
    }
}

/*
 * 
 * Assume that x has all bits alternating 1010 or like 10101
 * let y= x>>1
 * 
 * since the bits are alternating, when you right shift them how will be the new
 * bits compared to old bits????
 * 
 * All bits will be flipped
 * 
 * 1010 will become
 * 0101
 * and
 * 10101 will become
 * 01010
 * 
 * How to detect that all bits are flipped??
 * thats why we use XOR
 * so if we take x^(x>>1) we should get 1111 all 1s
 * 
 * next question ? how to detect 1111?
 * 
 * if we add 1 to this number it will become power of 2
 * 
 * we know how to detect power of 2 right? x&(x-1)==0
 */
