//Bruteforce Approach

class Solution {
    static int minxorpair(int n, int arr[]) {
        int minXor = Integer.MAX_VALUE;
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((arr[i] ^ arr[j]) < minXor) {
                    minXor = (arr[i] ^ arr[j]);
                }
            }
        }

        return minXor;
    }
}


//Optimal Approach
/*
if you want Minimum XOR pair ,you want to choose two Numbers such that their Binary representation is very Close, 
so that Muntiplying the same bits would give us 0.because of XOR property,so we sort and look for consecutive pairs
*/

class Solution {
    static int minxorpair(int n, int arr[]) {
        Arrays.sort(arr);
        int minXor = Integer.MAX_VALUE;

        for (int i = 0; i < (n - 1); i++) {
            if ((arr[i] ^ arr[i + 1]) < minXor) {
                minXor = (arr[i] ^ arr[i + 1]);
            }
        }

        return minXor;
    }
}
