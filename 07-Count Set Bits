// Bruteforce Approach

class Solution {
    static int setBits(int num) {
        int count = 0;
        for (int i = 0; i < 32; i++) {
            if (checkKthBit(num, i) != 0) {
                count++;
            }
        }

        return count;
    }

    private static int checkKthBit(int num, int k) {
        int mask = 1 << k;
        return num & mask;
    }
}

// Optimal Approach

class Solution {
    static int setBits(int num) {
        int count = 0;
        while (num != 0) {
            int rmsbm = rMSBM(num);
            num = num - rmsbm;
            count++;
        }

        return count;
    }

    private static int rMSBM(int num) {
        return num & twosCompliment(num);
    }

    private static int twosCompliment(int num) {
        return -num;// return (~num+1);
    }
}

// Using inbuilt method

class Solution {
    static int setBits(int num) {
        return Integer.bitCount(num);
    }
}
