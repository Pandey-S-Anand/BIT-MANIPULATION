//Bruteforce Approach

class Solution {
    public static int findXor(int[] arr) {
        int xor = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                int pairSum = arr[i] + arr[j];
                xor = xor ^ pairSum;
            }
        }

        return xor;
    }
}


//Optimal Approach
/*
An Efficient approach is based upon the fact that xor of the same values is 0. 
All the pairs like (a[i], a[j]) and (a[j], a[i]) will have same sum. So, their xor values will be 0. 
Only the pairs like (a[i], a[i]) will give the different result. So, take the xor of all the elements of the given array and multiply it by 2.
*/


class Solution {
    public static int findXor(int[] arr) {
        int xor = 0;
        for (int i = 0; i < arr.length; i++) {
            int pairSum = 2 * arr[i];
            xor = xor ^ pairSum;
        }
        return xor;
    }
}	
/*
	  Ex-arr[]={1,2,5,3,9};
	  
	  (1,1)=>(1+1)=2                                           
	  (1,2)=>(1+2)=3
	  (1,5)=>(1+5)=6
	  (1,3)=>(1+3)=4
	  (1,9)=>(1+9)=10
	  
	  (2,1)=>(2+1)=3
	  (2,2)=>(2+2)=4
	  (2,5)=>(2+5)=7
	  (2,3)=>(2+3)=5
	  (2,9)=>(2+9)=11
	  
	  (5,1)=>(5+1)=6
	  (5,2)=>(5+2)=7
	  (5,5)=>(5+5)=10
	  (5,3)=>(5+3)=8
	  (5,9)=>(5+9)=14
	  
	  (3,1)=>(3+1)=4
	  (3,2)=>(3+2)=5
	  (3,5)=>(3+5)=8
	  (3,3)=>(3+3)=6
	  (3,9)=>(3+9)=12
	  
	  (9,1)=>(9+1)=10
	  (9,2)=>(9+2)=11
	  (9,5)=>(9+5)=14
	  (9,3)=>(9+3)=12
	  (9,9)=>(9+9)=18
	  
	  XOR=(2^3^6^4^10)^(3^4^7^5^11)^(6^7^10^8^14)^(4^5^8^6^12)^(10^11^14^12^18)
	     =(3^3^6^6^4^4^10^10^7^7^5^5^11^11^8^8^14^14^12^12)^(2^4^10^6^18)
	     =0^(2^4^10^6^18)
	     =0^(2*1 ^ 2*2 ^ 2*5 ^ 2*3 ^ 2*9)
	     =0^24
	     =24
*/
